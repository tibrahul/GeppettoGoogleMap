function fixEvent(e) {  /* Get event object to IE */  e = e || window.event;  /* Add pageX/pageY to IE */  if (e.pageX == null && e.clientX != null) {    var html = document.documentElement;    var body = document.body;    e.pageX = e.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) - (html.clientLeft || 0);    e.pageY = e.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0);  }  /* Add which to IE */  if (!e.which && e.button) {    e.which = e.button & 1 ? 1 : (e.button & 2 ? 3 : ( e.button & 4 ? 2 : 0 ));  }  return e;}function getOffset(elem) {  if (elem.getBoundingClientRect)    return getOffsetRect(elem);  return getOffsetSum(elem);}function getOffsetRect(elem) {  var box = elem.getBoundingClientRect();  var body = document.body;  var docElem = document.documentElement;  var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;  var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;  var clientTop = docElem.clientTop || body.clientTop || 0;  var clientLeft = docElem.clientLeft || body.clientLeft || 0;  var top = box.top + scrollTop - clientTop;  var left = box.left + scrollLeft - clientLeft;  return {    top: Math.round(top),    left: Math.round(left)  };}function getOffsetSum(elem) {  var top = 0, left = 0;  while (elem) {    top = top + parseInt(elem.offsetTop);    left = left + parseInt(elem.offsetLeft);    elem = elem.offsetParent;  }  return {    top: top,    left: left  };}function find(id, object) {  var firstLevel, secondLevel, thirdLevel;  for (firstLevel in object) {    if (object.hasOwnProperty(firstLevel) && firstLevel == id) {      return object[id];    } else {      if (object[firstLevel].hasOwnProperty('children')) {        /* search secondLevel children */        for (secondLevel in object[firstLevel]['children']) {          if (object[firstLevel]['children'].hasOwnProperty(secondLevel) && secondLevel == id) {            return object[firstLevel]['children'][id];          } else {            if (object[firstLevel]['children'][secondLevel].hasOwnProperty('children')) {              /* search thirdLevel children */              for (thirdLevel in object[firstLevel]['children'][secondLevel]['children']) {                if (object[firstLevel]['children'][secondLevel]['children'].hasOwnProperty(thirdLevel) && thirdLevel == id) {                  return object[firstLevel]['children'][secondLevel]['children'][id];                }              }            }          }        }      }    }  }  return false;}function _find(value, property, object) {  var firstLevel, secondLevel, thirdLevel, i, j, k;  var columns;  /* search firstLevel children */  for (firstLevel in object) {    if (object.hasOwnProperty(firstLevel)) {      if (object[firstLevel][property] === value) {        return object[firstLevel];      } else {        /* search firstLevel columns */        if (object[firstLevel].hasOwnProperty('columns')) {          columns = object[firstLevel]['columns'];          if (columns && columns.constructor === Array) {            for (i = 0; i < columns.length; ++i) {              if (columns[i][property] === value) {                return columns[i]              }            }          }        }        /* search secondLevel children */        for (secondLevel in object[firstLevel]['children']) {          if (object[firstLevel]['children'].hasOwnProperty(secondLevel)) {            if (object[firstLevel]['children'][secondLevel][property] === value) {              return object[firstLevel]['children'][secondLevel];            } else {              /* search secondLevel columns */              if (object[firstLevel]['children'][secondLevel].hasOwnProperty('columns')) {                columns = object[firstLevel]['children'][secondLevel]['columns'];                if (columns && columns.constructor === Array) {                  for (j = 0; j < columns.length; ++j) {                    if (columns[j][property] === value) {                      return columns[j]                    }                  }                }              }              /* search thirdLevel children */              for (thirdLevel in object[firstLevel]['children'][secondLevel]['children']) {                if (object[firstLevel]['children'][secondLevel]['children'].hasOwnProperty(thirdLevel)) {                  if (object[firstLevel]['children'][secondLevel]['children'][thirdLevel][property] === value) {                    return object[firstLevel]['children'][secondLevel]['children'][thirdLevel];                  } else {                    /* search thirdLevel columns */                    if (object[firstLevel]['children'][secondLevel]['children'][thirdLevel].hasOwnProperty('columns')) {                      columns = object[firstLevel]['children'][secondLevel]['children'][thirdLevel]['columns'];                      if (columns && columns.constructor === Array) {                        for (k = 0; k < columns.length; ++k) {                          if (columns[k][property] === value) {                            return columns[k]                          }                        }                      }                    }                  }                }              }            }          }        }      }    }  }  return false;}/* get max id from object */function maxID(object) {  var firstLevel, secondLevel, thirdLevel, i, j, k;  var max = -1, id, columns;  for (firstLevel in object) {    if (object.hasOwnProperty(firstLevel)) {      id = Number(firstLevel);      /* search secondLevel children */      for (secondLevel in object[firstLevel]['children']) {        if (object[firstLevel]['children'].hasOwnProperty(secondLevel)) {          id = Number(secondLevel);          if (id > max) max = id;          /* search thirdLevel children */          for (thirdLevel in object[firstLevel]['children'][secondLevel]['children']) {            if (object[firstLevel]['children'][secondLevel]['children'].hasOwnProperty(thirdLevel)) {              id = Number(thirdLevel);              if (id > max) max = id;              /* search thirdLevel columns */              if (object[firstLevel]['children'][secondLevel]['children'][thirdLevel].hasOwnProperty('columns')) {                columns = object[firstLevel]['children'][secondLevel]['children'][thirdLevel]['columns'];                if (columns && columns.constructor === Array) {                  for (k = 0; k < columns.length; ++k) {                    id = Number(columns[k]['id']);                    if (id > max) max = id;                  }                }              }            }          }          /* search secondLevel columns */          if (object[firstLevel]['children'][secondLevel].hasOwnProperty('columns')) {            columns = object[firstLevel]['children'][secondLevel]['columns'];            if (columns && columns.constructor === Array) {              for (j = 0; j < columns.length; ++j) {                id = Number(columns[j]['id']);                if (id > max) max = id;              }            }          }        }      }      /* search firstLevel columns */      if (object[firstLevel].hasOwnProperty('columns')) {        columns = object[firstLevel]['columns'];        if (columns && columns.constructor === Array) {          for (i = 0; i < columns.length; ++i) {            id = Number(columns[i]['id']);            if (id > max) max = id;          }        }      }      if (id > max) max = id;    }  }  return max;}