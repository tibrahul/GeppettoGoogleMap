// Get the modalvar overlappingscreen = false;var dragscreenobjectid=0;var levelscreenid = 0;//single container checkvar overlappingsingle = false;var dragsingleobjectid=0;var levelsingleid = 0;//multi container checkvar overlappingmulti = false;var dragmultiobjectid=0;var levelmultiid = 0;var containerObj ="";var DragMaster = (function () {  var dragObject;  var mouseDownAt;  var currentDropTarget;  function mouseDown(e) {    e = fixEvent(e);    if (e.which != 1) return;    /* update element info on mouse down */    if (AxeControllerScope) {      AxeControllerScope.getElementInfo(e.target);    }    mouseDownAt = {      x: e.pageX,      y: e.pageY,      element: this    };    addDocumentEventHandlers();    return false;  }  function mouseMove(e) {    e = fixEvent(e);    /* (1) */    if (mouseDownAt) {      if (Math.abs(mouseDownAt.x - e.pageX) < 3 && Math.abs(mouseDownAt.y - e.pageY) < 3) {        return false;      }      var elem = mouseDownAt.element;      /* Current drag object */      dragObject = elem.dragObject;      /* Keep relative coordinates of drag object */      var mouseOffset = getMouseOffset(elem, mouseDownAt.x, mouseDownAt.y);      mouseDownAt = null;      /* Offset already calculated */      dragObject.onDragStart(mouseOffset);    }    /* (2) */    dragObject.onDragMove(e.pageX, e.pageY);    /* (3) */    var newTarget = getCurrentTarget(e);    /* (4) */    if (currentDropTarget != newTarget) {      if (currentDropTarget) {        currentDropTarget.onLeave();      }      if (newTarget) {        newTarget.onEnter();      }      currentDropTarget = newTarget;    }    /* (5) */    return false;  }  function mouseUp() {    if (!dragObject) { /* (1) */      mouseDownAt = null;    } else {      /*do not allow to place container inside another container*/    	if(currentDropTarget){    		 var drag, dragResizable, dragRole,             drop, dropResizable, dropRole;           dragResizable = dragObject.toString();           drag = $('#' + dragResizable).children().not('span.resize-handle').attr('id');                      dropResizable = currentDropTarget.toString();           drop = $('#' + dropResizable).children().not('span.resize-handle').attr('id') ?                  $('#' + dropResizable).children().not('span.resize-handle').attr('id') : dropResizable;           if (dropResizable === 'screen') {             drop = dropResizable;           }           dropRole = (drop == 'screen') ? 'screen' : $('#' + drop).data('role');           dragRole = $('#' + drag).data('role');                      if(dragRole == undefined){        	   dragRole =  $('#' + dragResizable).children().not('span.resize-handle').data('role');           }           console.log(dropRole+" "+dragRole);                      switch (dropRole) {           case 'card':           case 'panel':           case 'tab':           case 'accordion':           case 'section':           case 'panel-content':           case 'card-content':           case 'border-container':             switch (dragRole) {               case 'card':               case 'panel':               case 'tab':               case 'accordion':               //case 'table':               case 'section':               case 'panel-content':               case 'card-content':               case 'border-container':	               	   $("<div title='Warning'>This container is not allowed here !</div>").dialog();              currentDropTarget = null;             }             break;         }    	}    	/* (2) */      if (currentDropTarget) {        currentDropTarget.accept(dragObject);        dragObject.onDragSuccess(currentDropTarget);        /* update element info after drag */        if (AxeControllerScope) {          AxeControllerScope.getElementInfo($('#' + dragObject.toString()).children().not('span.resize-handle')[0]);		   	/*Rashmi*             *  Fix for bug related to repositioning of elements inside accordion or any container             */        	var dragobj = $('#' + dragObject.toString());         	var nextsibling = dragobj.siblings();        	for(var z=0;z<nextsibling.length;z++){        		console.log("nextsibling  "+nextsibling[z].id + " "+z);        		if(AxeControllerScope.name == 'desktop')        		AxeControllerScope.getElementInfo($('#' + nextsibling[z].id).children().not('span.resize-handle')[0]);        	}        	/*Rashmi*             *  end             */        	/********************************* OVERLAPPING ISSUE FIX START *****************************/            var screenchildren = nodeTree['screen']['children'] ? nodeTree['screen']['children'] : {};            var draggedObj = screenchildren[dragResizable];            if(draggedObj !=undefined && draggedObj.portraitY <0 ){            	$("<div title='Warning'>Components not allowed outside screen!!</div>").dialog();            	AxeControllerScope.outsidescreen = true;            	AxeControllerScope.$apply();            }else{            	AxeControllerScope.outsidescreen = false;            	AxeControllerScope.$apply();            }            for (var firstLevel in screenchildren) {            // indicates that drag obj is inside a container            if(draggedObj == undefined && screenchildren[firstLevel].hasOwnProperty('children')){             	var dragobjid =dragResizable;        		var draggedobj = screenchildren[firstLevel]['children'][dragobjid];            		                if(draggedobj != undefined ){     	    		var topsec = draggedobj.portraitY;    	            var leftsec = draggedobj.portraitX;    	            var widthsec = draggedobj.portrait_width;    	            var heightsec = draggedobj.portrait_height;                }else{ // check for multilevel containers and get the dragged obj id                	for (var secondLevel in screenchildren[firstLevel]['children']) {                	if (screenchildren[firstLevel]['children'][secondLevel].hasOwnProperty('children')) {                        	draggedobj = screenchildren[firstLevel]['children'][secondLevel]['children'][dragobjid];                        	containerObj = screenchildren[firstLevel]['children'][secondLevel]                        	if(draggedobj!=undefined)                        	break;                		}                	}    	    		var topsec = draggedobj.portraitY;    	            var leftsec = draggedobj.portraitX;    	            var widthsec = draggedobj.portrait_width;    	            var heightsec = draggedobj.portrait_height;                }                                        for (var secondLevel in screenchildren[firstLevel]['children']) {                    	//check if the container is single                     	if(screenchildren[firstLevel]['children'][secondLevel]['children'] == undefined){                    		//if single                     		if(overlappingsingle == true && dragsingleobjectid !=0 && (dragsingleobjectid == dragResizable|| levelsingleid == dragResizable)){                    		  $('#' + levelsingleid).css({          	                	border: "none"	          	      	       });	      	                  	          	              $('#' + dragsingleobjectid).css({	          	                	border: "none"	          	      	      });	          	            overlappingsingle = false;	          	            dragsingleobjectid = 0;	          	            levelsingleid =0;	          	            AxeControllerScope.overlapping = false;	          	            AxeControllerScope.$apply();             				}else if(overlappingsingle == true && dragsingleobjectid !=0 && (dragsingleobjectid != dragResizable || levelsingleid != dragResizable)){             					$("<div title='Warning'>Please resolve the overlapping of components (marked in Red) before proceeding further !</div>").dialog();             					break;             				}                    	  	  var topfirst = screenchildren[firstLevel]['children'][secondLevel].portraitY;          	                  var leftfirst = screenchildren[firstLevel]['children'][secondLevel].portraitX;          	                  var widthfirst = screenchildren[firstLevel]['children'][secondLevel].portrait_width;          	                  var heightfirst = screenchildren[firstLevel]['children'][secondLevel].portrait_height;	          	                         	                if(secondLevel != dragobjid){          	                	if(isOverlap(topfirst ,topsec ,leftfirst ,leftsec ,widthfirst ,eval(widthsec) ,heightfirst ,eval(heightsec) )) //is overlapping          	                	{          	                		$('#' + dragobjid).css({          	                	          border: "1px solid red"          	                	        });          	                		$('#' + secondLevel).css({          	              	          border: "1px solid red"          	              	        });          	                		overlappingsingle = true;                                    dragsingleobjectid = dragobjid;                                    levelsingleid = secondLevel;                                    AxeControllerScope.overlapping = true;                                    AxeControllerScope.$apply();          	                		//$("<div title='Warning'>The componenets are too close,please give more space before proceeding further !</div>").dialog();          	                		break;          	                	}          	                }                    	}                      	else { //if multilevel container like accordion                      		if(containerObj == screenchildren[firstLevel]['children'][secondLevel]){                      		for (var thirdLevel in screenchildren[firstLevel]['children'][secondLevel]['children']) {	                      		var topfirst = screenchildren[firstLevel]['children'][secondLevel]['children'][thirdLevel].portraitY;	            	            var leftfirst = screenchildren[firstLevel]['children'][secondLevel]['children'][thirdLevel].portraitX;	            	            var widthfirst = screenchildren[firstLevel]['children'][secondLevel]['children'][thirdLevel].portrait_width;	            	            var heightfirst = screenchildren[firstLevel]['children'][secondLevel]['children'][thirdLevel].portrait_height;	                            	            	            if(overlappingmulti == true && dragmultiobjectid !=0 && (dragmultiobjectid == dragResizable|| levelmultiid == dragResizable)){	            	            	$('#' + levelmultiid).css({		          	                	border: "none"		          	      	       	});		      	                  		          	              	$('#' + dragmultiobjectid).css({		          	                	border: "none"		          	              	});		          	              overlappingmulti = false;		          	              dragmultiobjectid = 0;		          	              levelmultiid =0;		          	              AxeControllerScope.overlapping = false;		          	              AxeControllerScope.$apply();	               				}else if(overlappingmulti == true && dragmultiobjectid !=0 && (dragmultiobjectid != dragResizable || levelmultiid != dragResizable)){	               					$("<div title='Warning'>Please resolve the overlapping of components (marked in Red) before proceeding further !</div>").dialog();	               					break;	               				}	            	            if(thirdLevel != dragobjid){	          	                	if(isOverlap(topfirst ,topsec ,leftfirst ,leftsec ,widthfirst ,eval(widthsec) ,heightfirst ,eval(heightsec) )) //is overlapping	          	                	{	          	                		$('#' + dragobjid).css({	          	                	          border: "1px solid red"	          	                	        });	          	                		$('#' + thirdLevel).css({	          	              	          border: "1px solid red"	          	              	        });	          	                		overlappingmulti = true;	  		          	              	dragmultiobjectid = dragobjid;	  		          	              	levelmultiid = thirdLevel;	  		          	              	AxeControllerScope.overlapping = true;	  		          	              	AxeControllerScope.$apply();	          	                		//$("<div title='Warning'>The componenets are too close,please give more space before proceeding further !</div>").dialog();	          	                		break;	          	                	}	          	                }                      		}                      		}                      	}      	            }//out for            	}else{            		// drag object is on screen            		var dragid = dragResizable;           			var draggedObj = screenchildren[dragid];            			if(draggedObj != undefined){            				if(overlappingscreen == true && dragscreenobjectid !=0 && (dragscreenobjectid == dragResizable|| levelscreenid == dragResizable)){            				 $('#' + levelscreenid).css({                              	border: "none"                    	        });                              $('#' + dragscreenobjectid).css({                              	border: "none"                    	        });                              overlappingscreen = false;                              dragscreenobjectid = 0;                              AxeControllerScope.overlapping = false;                              AxeControllerScope.$apply();            				}else if(overlappingscreen == true && dragscreenobjectid !=0 && (dragscreenobjectid != dragResizable || levelscreenid != dragResizable)){            					$("<div title='Warning'>Please resolve the overlapping of components (marked in Red) before proceeding further !</div>").dialog();            					break;            				}                               	        	    		var topsec = draggedObj.portraitY;	        	            var leftsec = draggedObj.portraitX;	        	            var widthsec = draggedObj.portrait_width;	        	            var heightsec = draggedObj.portrait_height;	        	            	                    	var topfirst = screenchildren[firstLevel].portraitY;	                        var leftfirst = screenchildren[firstLevel].portraitX;	                        var widthfirst = screenchildren[firstLevel].portrait_width;	                        var heightfirst = screenchildren[firstLevel].portrait_height;	                       	                        if(firstLevel != dragid){	                        	if(isOverlap(topfirst,topsec,leftfirst,leftsec,widthfirst,eval(widthsec),heightfirst,eval(heightsec))) //is overlapping	                        	{	                        		$('#' + dragid).css({	                        	          border: "1px solid red"	                        	        });	                        		$('#' + firstLevel).css({	                      	          border: "1px solid red"	                      	        });	                        		dragscreenobjectid = dragid;	                        		levelscreenid = firstLevel;	                        		overlappingscreen = true;	                        		AxeControllerScope.overlapping = true;	                        		AxeControllerScope.$apply();	                        		//$("<div title='Warning'>The componenets are too close,please give more space before proceeding further !</div>").dialog();	                        		break;	                        	}	                        }            			}            	}            }        }      } else {        dragObject.onDragFail();      }      dragObject = null;    }    /* (3) */    removeDocumentEventHandlers();  }  function getMouseOffset(target, x, y) {    var position = getOffset(target);    return {      x: x - position.left,      y: y - position.top    };  }  function getCurrentTarget(e) {    /* Hide drag object to get element underneath it and then show it again */    var x, y;    if (navigator.userAgent.match('MSIE') || navigator.userAgent.match('Gecko')) {      x = e.clientX;      y = e.clientY;    } else {      x = e.pageX;      y = e.pageY;    }    /* To prevent blinking by reducing time between hide and show */    dragObject.hide();    var elem = document.elementFromPoint(x, y);    dragObject.show();    /* find the nested drop target */    while (elem) {      /* which can accept drag object */      if (elem.dropTarget && elem.dropTarget.canAccept(dragObject)) {        return elem.dropTarget;      }      elem = elem.parentNode;          }    /* drop target not found */    return null;  }  function addDocumentEventHandlers() {    document.onmousemove = mouseMove;    document.onmouseup = mouseUp;    document.ondragstart = document.body.onselectstart = function () {      return false;    }  }  function removeDocumentEventHandlers() {    document.onmousemove = document.onmouseup = document.ondragstart = document.body.onselectstart = null;  }  return {    makeDraggable: function (element) {      element.onmousedown = mouseDown;    }  };    function isOverlap(topOne,topTwo,leftOne,leftTwo,widthOne,widthTwo,heightOne,heightTwo){     /* var leftTop = leftTwo > leftOne && leftTwo < leftOne+widthOne               && topTwo > topOne && topTwo < topOne+heightOne,          rightTop = leftTwo+widthTwo > leftOne && leftTwo+widthTwo < leftOne+widthOne               && topTwo > topOne && topTwo < topOne+heightOne,          leftBottom = leftTwo > leftOne && leftTwo < leftOne+widthOne               && topTwo+heightTwo > topOne && topTwo+heightTwo < topOne+heightOne,          rightBottom = leftTwo+widthTwo > leftOne && leftTwo+widthTwo < leftOne+widthOne               && topTwo+heightTwo > topOne && topTwo+heightTwo < topOne+heightOne;      return leftTop || rightTop || leftBottom || rightBottom;*/	  	  var x1 = leftOne+5;      var y1 = topOne+5;      var h1 = heightOne+5;      var w1 = widthOne+5;      var b1 = y1 + h1;      var r1 = x1 + w1;      var x2 = leftTwo+5;      var y2 = topTwo+5;      var h2 = heightTwo+5;      var w2 = widthTwo+5;      var b2 = y2 + h2;      var r2 = x2 + w2;      if (b1 < y2 || y1 > b2 || r1 < x2 || x1 > r2) return false;      return true;  } }());