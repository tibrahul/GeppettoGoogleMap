function DragObject(element) {  element.dragObject = this;  DragMaster.makeDraggable(element);  var rememberPosition, mouseOffset, isMenuItem, menuItemId;  this.onDragStart = function (offset) {    var result;    /* if element is menu item */    if (~(element.id).indexOf('icon-')) {      switch (AxeControllerScope.name) {        case 'desktop':          result = DesktopComponents(element.id);          break;        case 'tablet':          result = TabletComponents(element.id);          break;        case 'mobile':          result = MobileComponents(element.id);          break;      }      element = result.element;      isMenuItem = result.isMenuItem;      menuItemId = result.menuItemId;    }    var s = element.style;    rememberPosition = {      top: s.top,      left: s.left,      position: s.position    };    s.position = 'absolute';    mouseOffset = offset;  };  this.hide = function () {    $(element).hide();  };  this.show = function () {    $(element).show();  };  this.onDragMove = function (x, y) {    /* Change element's position while dragging */    element.style.top = y - mouseOffset.y + 'px';    element.style.left = x - mouseOffset.x + 'px';    var screenChildren = nodeTree['screen']['children'];    var firstLevel, secondLevel, children;    if (element.dragObject) {      if (screenChildren[element.id]) {        if (screenChildren[element.id].hasOwnProperty('children')) {          children = screenChildren[element.id]['children'];          switch (screenChildren[element.id]['type']) {            case 'accordion':            case 'tab':              for (firstLevel in children) {                if (children.hasOwnProperty(firstLevel)) {                  if (children[firstLevel].hasOwnProperty('children')) {                    for (secondLevel in children[firstLevel]['children']) {                      if (children[firstLevel]['children'].hasOwnProperty(secondLevel)) {                        document.getElementById(secondLevel).style.top = y - mouseOffset.y + children[firstLevel]['children'][secondLevel][orientation + 'OffsetY'] + 'px';                        document.getElementById(secondLevel).style.left = x - mouseOffset.x + children[firstLevel]['children'][secondLevel][orientation + 'OffsetX'] + 'px';                      }                    }                  }                }              }              break;            default:              for (firstLevel in children) {                if (children.hasOwnProperty(firstLevel)) {                  /* TODO: find solution using position absolute */                  document.getElementById(firstLevel).style.top = y - mouseOffset.y + children[firstLevel][orientation + 'OffsetY'] + 'px';                  document.getElementById(firstLevel).style.left = x - mouseOffset.x + children[firstLevel][orientation + 'OffsetX'] + 'px';                }              }          }        }      }    }  };  this.onDragSuccess = function (dropTarget) {    if (isMenuItem) {      $('#' + id).appendTo('#screen');      new Resizable($(element));      new DragObject(element);      ++id;      /* show element info after first drag from menu */      if (AxeControllerScope) {        AxeControllerScope.getElementInfo($(element).children().not('span.resize-handle')[0]);      }      /* Restore dragging element from menu */      element = $('#' + menuItemId)[0];    }  };  this.onDragFail = function () {    if (isMenuItem) {      /* Remove element */      $('#' + id).remove();      /* Restore dragging element from menu */      element = $('#' + menuItemId)[0];      /* Restore id counter */      switch (menuItemId) {        case 'icon-tab':        case 'icon-accordion':          id -= 4;          break;        case 'icon-panel':          id -= 2;          break;        default:          --id;      }    } else {      var s = element.style;      s.top = rememberPosition.top;      s.left = rememberPosition.left;      s.position = rememberPosition.position;    }  };  this.toString = function () {    return element.id;  };}