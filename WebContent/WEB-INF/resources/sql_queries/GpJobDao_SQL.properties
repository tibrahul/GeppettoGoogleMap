#start_generation query
start_generation.sql=SELECT id as ID, project_id as PROJECT_ID, user_id as USER_ID, user_name as USER_NAME, \
					status as STATUS, status_message as STATUS_MESSAGE, stack_trace as STACK_TRACE, claimed as CLAIMED \
					FROM gp_job where user_id=:user_id AND project_id=:project_id AND user_name=:user_name ORDER BY id DESC LIMIT 1
                     
#start_generation query
get_generation_status.sql=SELECT id as ID, project_id as PROJECT_ID, user_id as USER_ID, user_name as USER_NAME, \
					status as STATUS, status_message as STATUS_MESSAGE, stack_trace as STACK_TRACE, claimed as CLAIMED, parent_job_id \
					FROM gp_job where parent_job_id=:parent_job_id ORDER BY id DESC LIMIT 1

get_job_by_uid_pid_status.sql=SELECT id as ID, project_id as PROJECT_ID, user_id as USER_ID, user_name as USER_NAME, \
					status as STATUS, status_message as STATUS_MESSAGE, stack_trace as STACK_TRACE, claimed as CLAIMED, parent_job_id \
					FROM gp_job where parent_job_id=:parent_job_id AND status=:gen_status ORDER BY id DESC LIMIT 1

get_job_errors.sql=SELECT id as ID, project_id as PROJECT_ID, user_id as USER_ID, user_name as USER_NAME, \
					status as STATUS, status_message as STATUS_MESSAGE, stack_trace as STACK_TRACE, claimed as CLAIMED, parent_job_id \
					FROM gp_job where parent_job_id=:parent_job_id AND status=:gen_status ORDER BY id DESC
 
 #generation insert query
insert_status.sql=INSERT INTO gp_job(project_id, user_id, user_name, status, status_message, stack_trace, claimed) VALUES \
					(:project_id, :user_id, :user_name, :status, :status_message, :stack_trace, :claimed)